#!/usr/bin/env python
# -*- coding: utf-8 -*-
import getpass
import argparse
import logging
import pprint

import coloredlogs
import sys

from pyswedbank.wrapper import Swedbank, SWEDBANK

logger = logging.getLogger(__name__)

help_text = "Cli to fetch status of swedbank accounts"


def main():
    parser = argparse.ArgumentParser(description=help_text)
    parser.add_argument(
            'username',
            metavar='username',
            type=str,
            help="your social security number"
    )
    parser.add_argument(
            '-l',
            '--log-level',
            action='store',
            type=str,
            dest='log_level',
            help='''
                [DEBUG, INFO(default), WARNING, ERROR, EXCEPTION]
                ''',
            default='INFO'
    )
    parser.add_argument(
            "-p",
            "--password",
            type=str,
            action='store',
            dest='password',
            help="Password for your account"
    )
    parser.add_argument(
            "-b",
            "--bank",
            metavar="bank",
            help="Defaults to swedbank, banks available: %s" % Swedbank.banks(),
            default=SWEDBANK
    )
    parser.add_argument(
            "-t",
            "--transactions",
            action="store_true",
            dest="transactions",
            help="Show all available transactions for account."
    )

    args = parser.parse_args()
    numeric_level = getattr(logging, args.log_level.upper(), None)
    if not isinstance(numeric_level, int):
        raise ValueError('Invalid log level: %s' % args.log_level)
    coloredlogs.install(level=numeric_level)
    logger.debug('Log level set to %s', args.log_level)

    if args.password:
        password = args.password
    else:
        password = getpass.getpass()

    bank = args.bank

    if not password:
        logger.error("Missing password!")
        return

    swed = Swedbank(args.username, password, bank)
    pp = pprint.PrettyPrinter(indent=4)
    pp.pprint(swed.accounts())
    if args.transactions:
        pp.pprint(swed.history())

if __name__ == "__main__":
    sys.exit(main())
